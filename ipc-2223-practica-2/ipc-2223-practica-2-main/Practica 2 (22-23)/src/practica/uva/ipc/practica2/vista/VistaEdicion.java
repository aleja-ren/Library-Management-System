/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica.uva.ipc.practica2.vista;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.SpinnerNumberModel;
import practica.uva.ipc.practica2.modelo.Biblioteca;

/**
 * Esta clase es responsable de presentar los datos al usuario final y envia elementos al controlador
 * cuando se interactua con la interfaz grafica.
 
 * @author Alejandra Gavino-Dias
 * @author Sara Aparicio Fernandez
 */
public class VistaEdicion extends javax.swing.JFrame {
    
    private ControladorEdicion controlador;
    private Biblioteca modelo;

    /**
     * Constructor de la clase vista e inicializacion de los componentes.
     * @param modelo
     * @see #initComponents().
     */
    public VistaEdicion(Biblioteca modelo) {  
        initComponents();

        SpinnerNumberModel spinnerEuros = new SpinnerNumberModel();
        spinnerEuros.setMinimum(0);
        jSpinnerEuros.setModel(spinnerEuros);
        
        SpinnerNumberModel spinnerCentimos = new SpinnerNumberModel();
        spinnerCentimos.setMinimum(0);
        spinnerCentimos.setMaximum(99);
        jSpinnerCentimos.setModel(spinnerCentimos);
        
        jLabelPrecio.setText(" = 0.00 € ");
        jTextFieldIsbn.setEditable(true);  
        
        this.modelo = modelo;
        this.controlador = new ControladorEdicion(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BotonGuardar = new javax.swing.JButton();
        BotonEditar = new javax.swing.JButton();
        BotonBorrar = new javax.swing.JButton();
        jButtonDatosLibro = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldTitulo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescripcion = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldIsbn = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxEstado = new javax.swing.JComboBox<>();
        jSpinnerEuros = new javax.swing.JSpinner();
        jSpinnerCentimos = new javax.swing.JSpinner();
        jLabelPrecio = new javax.swing.JLabel();
        jCheckBoxLeido = new javax.swing.JCheckBox();
        jLabelMensaje = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListLista = new javax.swing.JList<>();
        jButtonMenu = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Biblioteca");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/practica/uva/ipc/practica2/imagenes/icono_biblioteca.png")));

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        BotonGuardar.setBackground(new java.awt.Color(46, 204, 113));
        BotonGuardar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BotonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/uva/ipc/practica2/imagenes/icono_guardar.png"))); // NOI18N
        BotonGuardar.setText("Guardar");
        BotonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonGuardar);

        BotonEditar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BotonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/uva/ipc/practica2/imagenes/icono_editar.png"))); // NOI18N
        BotonEditar.setText("Editar");
        BotonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEditarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonEditar);

        BotonBorrar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BotonBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/uva/ipc/practica2/imagenes/icono_borrar.png"))); // NOI18N
        BotonBorrar.setText("Borrar");
        BotonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBorrarActionPerformed(evt);
            }
        });
        jPanel1.add(BotonBorrar);

        jButtonDatosLibro.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButtonDatosLibro.setText("Mostrar datos del libro");
        jButtonDatosLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDatosLibroActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonDatosLibro);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Título");

        jTextAreaDescripcion.setColumns(20);
        jTextAreaDescripcion.setLineWrap(true);
        jTextAreaDescripcion.setRows(5);
        jTextAreaDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaDescripcionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaDescripcion);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Descripcion");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("ISBN");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Estado");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("Precio");

        jComboBoxEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Malo", "Regular", "Bueno" }));

        jSpinnerEuros.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerEurosStateChanged(evt);
            }
        });

        jSpinnerCentimos.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerCentimosStateChanged(evt);
            }
        });

        jCheckBoxLeido.setText("Ya lo he leido");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBoxLeido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(154, 154, 154))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jSpinnerEuros)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSpinnerCentimos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jComboBoxEstado, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextFieldTitulo)
                                    .addComponent(jScrollPane1)
                                    .addComponent(jTextFieldIsbn, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(2, 2, 2)))
                        .addGap(10, 10, 10))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                        .addGap(9, 9, 9))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldIsbn, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxEstado)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSpinnerCentimos)
                    .addComponent(jSpinnerEuros))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxLeido, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(9, 9, 9))
        );

        jLabelMensaje.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelMensaje.setForeground(new java.awt.Color(255, 0, 0));

        jListLista.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListLista);

        jButtonMenu.setBackground(new java.awt.Color(204, 204, 255));
        jButtonMenu.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButtonMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/practica/uva/ipc/practica2/imagenes/icono_menu.png"))); // NOI18N
        jButtonMenu.setText("IR A MENU");
        jButtonMenu.setMaximumSize(new java.awt.Dimension(182, 23));
        jButtonMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonMenuMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButtonMenuMouseExited(evt);
            }
        });
        jButtonMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMenuActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 62)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("Edición manual");

        jButton1.setBackground(new java.awt.Color(188, 210, 238));
        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jLabel7)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(17, 17, 17))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(jButtonMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Metodo que llama al controlador cuando se va a editar un libro.
     * @param evt variable que reacciona al evento del boton de editar
     */
    private void BotonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEditarActionPerformed
        if(jListLista.getSelectedValue()==null){
            mostrarMensaje("No hay ningún libro seleccionado en la lista");
        }else if(controlador.getEstadoEditar() == false){
            controlador.procesarEditar();
            controlador.setEstadoEditar(true);
            BotonBorrar.setText("Cancelar edicion");
            jListLista.clearSelection();
            jTextFieldIsbn.setBackground(Color.LIGHT_GRAY);
        }else{
            mostrarMensaje("Guarde el libro editado o cancela su edicion");
        }
    }//GEN-LAST:event_BotonEditarActionPerformed

    /**
     * Metodo que llama al controlador cuando se va a borrar un libro.
     * @param evt variable que reacciona al evento del boton de borrar o cancelar ediccion
     */
    private void BotonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBorrarActionPerformed
        if(modelo.getSeleccionado()!=null){
            mostrarMensaje("");
            //si pulso el botón borrar (cancelar edición) cuando tengo un libro seleccionado
            //tengo que cancelar la , como lo hago en procesarEditar
            isbnEditable(true);
            mostrarDatos("", "", "","Malo", 0.00, false);
            BotonBorrar.setText("Borrar");     
        }else if(controlador.getEstadoEditar() == false){
            controlador.procesarBorrar();
        }else{
            mostrarMensaje("");
            isbnEditable(true);
            controlador.setEditarFalse();
            jListLista.clearSelection();
            controlador.setEstadoEditar(false);
            mostrarDatos("", "", "","Malo", 0.00, false);
            BotonBorrar.setText("Borrar");
        }
        jTextFieldIsbn.setBackground(Color.WHITE);

    }//GEN-LAST:event_BotonBorrarActionPerformed

    /**
     * Metodo que llama al controlador cuando se va a guardar un libro.
     * @param evt variable que reacciona al evento del boton de guardar
     */
    private void BotonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarActionPerformed
        controlador.procesarGuardar();
        if(controlador.getEstadoEditar() == true){
           controlador.setEstadoEditar(false);
           BotonBorrar.setText("Borrar");
           controlador.setEditarFalse();
        }
        jTextFieldIsbn.setBackground(Color.WHITE);
        BotonBorrar.setText("Borrar");
    }//GEN-LAST:event_BotonGuardarActionPerformed

    /**
     * Metodo que cambia el texto que muestra el precio del libro al usuario (euros).
     * @param evt variable que reacciona al evento del spinner de los euros
     */
    private void jSpinnerEurosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerEurosStateChanged
        if(Integer.toString(getCentimos()).length()==1){
            jLabelPrecio.setText("= "+String.valueOf(getEuros())+".0"+String.valueOf(getCentimos())+" €");
        }else{
            jLabelPrecio.setText("= "+String.valueOf(getEuros())+"."+String.valueOf(getCentimos())+" €");
        }
    }//GEN-LAST:event_jSpinnerEurosStateChanged

    /**
     * Metodo que cambia el texto que muestra el precio del libro al usuario (centimos).
     * @param evt variable que reacciona al evento del spinner de los centimos
     */
    private void jSpinnerCentimosStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerCentimosStateChanged
        if(Integer.toString(getCentimos()).length()==1){
            jLabelPrecio.setText("= "+String.valueOf(getEuros())+".0"+String.valueOf(getCentimos())+" €");
        }else{
            jLabelPrecio.setText("= "+String.valueOf(getEuros())+"."+String.valueOf(getCentimos())+" €");
        }
    }//GEN-LAST:event_jSpinnerCentimosStateChanged
    
    /**
     * Metodo que muestra los datos del libro seleccionado en la lista
     * @param evt variable que racciona al evento de boton de ver datos libro
     */
    private void jButtonDatosLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDatosLibroActionPerformed
        if(controlador.getEstadoEditar() == false){
            controlador.mostrarDatosLibro();
            jListLista.clearSelection();
        }
    }//GEN-LAST:event_jButtonDatosLibroActionPerformed

    private void jButtonMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMenuActionPerformed
        controlador.procesarMenu();
    }//GEN-LAST:event_jButtonMenuActionPerformed

    private void jButtonMenuMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonMenuMouseExited
        jButtonMenu.setBackground(new Color(204,204,255));
    }//GEN-LAST:event_jButtonMenuMouseExited

    private void jButtonMenuMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonMenuMouseEntered
        jButtonMenu.setBackground(new Color(51,204,255));
    }//GEN-LAST:event_jButtonMenuMouseEntered

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        controlador.limpiarCasillas();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Habilita la función de pasar entre campos en el textArea con la tecla tabulador.
     * @param evt 
     */
    private void jTextAreaDescripcionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaDescripcionKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_TAB){
            if (evt.getModifiersEx() > 0) {
                jTextAreaDescripcion.transferFocusBackward();
            }else{
                jTextAreaDescripcion.transferFocus();
            }
            evt.consume();
        }
    }//GEN-LAST:event_jTextAreaDescripcionKeyPressed
    
    /**
     * Metodo que devuelve el titulo del libro que ha añadido el usuario.
     * @return titulo, titulo introducido por el usuario
     */
    public String getTitulo(){
        return jTextFieldTitulo.getText();
    }
    
    /**
     * Metodo que devuelve la descripcion del libro que ha añadido el usuario.
     * @return descripcion, descripcion introducido por el usuario
     */
    public String getDescripcion(){
        return jTextAreaDescripcion.getText();
    }
  
    /**
     * Metodo que devuelve el ISBN del libro que ha añadido el usuario.
     * @return isbn, isbn introducido por el usuario
     */
    public String getIsbn(){
        return jTextFieldIsbn.getText();
    }
  
    /**
     * Metodo que muestra mensajes de error al usuario
     * @param mensaje, mensaje de error
     */
    public void mostrarMensaje(String mensaje) {
        jLabelMensaje.setText(mensaje);
    }
    
    /**
     * Metodo que devuelve el estado de un libro, si se ha leido o no.
     * @return estado, estado del libro.
     */
    public boolean getLeido(){
        return jCheckBoxLeido.isSelected();
    }
    
    /**
     * Metodo que devuelve los euros del precio del libro.
     * @see #getCentimos() se usa junto con este metodo
     * @return euros, los euros del precio del libro
     */
    public int getEuros(){
        return (int) jSpinnerEuros.getValue();
    }
    
    /**
     * Metodo que devuelve los centimos del precio del libro.
     * @see #getEuros() se usa junto con este metodo
     * @return centimos, centimos del precio del libro
     */
    public int getCentimos(){
        return (int) jSpinnerCentimos.getValue();
    }
    
    /**
     * Motodo que muestra en texto el precio (euros y centimos) del libro que se ha añadido.
     * @param precio, precio del libro
     */
    public void imprimirPrecio(double precio){
        jLabelPrecio.setText(String.valueOf(precio));
    }
    
    /**
     * Metodo que devuelve el estado de un libro (malo, regular, bueno)
     * @return estado, opinion del libro
     */
    public String getEstado(){
        return (String) jComboBoxEstado.getSelectedItem();
    }
    
    /**
     * Metodo que actualiza la lista de libros que se han añadido.
     * @param historial datos del libro que se muestran en la lista. 
     */
    public void actualizarHistorial(String []historial) {
        jListLista.setListData(historial);
    }
    
    /**
     * Metodo que devuelve el libro seleccionado en la lista.
     * @return libro seleccionado
     */
    public String libroSelecionado(){
        return jListLista.getSelectedValue();
    }
    
    /**
     * Metodo que actualiza el estado del TextField del ISBN a estado editable.
     * @param estado true si se esta editando el liro o en caso contrario false
     */
    public void isbnEditable (boolean estado){
        jTextFieldIsbn.setEditable(estado);
    }
    
    /**
     * Metodo que muestra los datos del libro en los elementos de la interfaz grafica cuando se va a editar un libro.
     * @param titulo titulo del libro
     * @param descripcion descripcion del libro
     * @param isbn isbn del libro
     * @param estado estado del libro
     * @param precio precio del libro
     * @param leido true si se ha leido el libro o false en caso contrario
     */
    public void mostrarDatos(String titulo, String descripcion, String isbn, String estado, double precio, boolean leido){
        
        //aqui puedo hacer un if seleccionado no es null
        //cambiar el fondo del isbn a gris y tal
        if(modelo.getSeleccionado()!=null){
            //tengo que hacer que el campos del isbn se me ponga en gris
            //que el texto del boton de borra me cambie a cancelar edicion
            jTextFieldIsbn.setBackground(Color.LIGHT_GRAY);
            BotonBorrar.setText("Cancelar edicion");    
        }
        
        jTextFieldTitulo.setText(titulo);
        jTextAreaDescripcion.setText(descripcion);
        jTextFieldIsbn.setText(isbn);
        jComboBoxEstado.setActionCommand(estado);
        jLabelPrecio.setText(" = " + Double.toString(precio) + " € "); // esto ya funciona bien
        jCheckBoxLeido.setSelected(leido);
        
        String str = String.valueOf(precio);
        int euros = Integer.parseInt(str.substring(0, str.indexOf('.')));
        int centimos= Integer.parseInt(str.substring(str.indexOf('.') + 1));

        //System.out.println(euros);
        //System.out.println(centimos);

        jSpinnerEuros.setValue(euros);
        jSpinnerCentimos.setValue(centimos);
    }
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBorrar;
    private javax.swing.JButton BotonEditar;
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonDatosLibro;
    private javax.swing.JButton jButtonMenu;
    private javax.swing.JCheckBox jCheckBoxLeido;
    private javax.swing.JComboBox<String> jComboBoxEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelMensaje;
    private javax.swing.JLabel jLabelPrecio;
    private javax.swing.JList<String> jListLista;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerCentimos;
    private javax.swing.JSpinner jSpinnerEuros;
    private javax.swing.JTextArea jTextAreaDescripcion;
    private javax.swing.JTextField jTextFieldIsbn;
    private javax.swing.JTextField jTextFieldTitulo;
    // End of variables declaration//GEN-END:variables
}
